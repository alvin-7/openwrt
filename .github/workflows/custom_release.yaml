name: Build OpenWrt

on:
  push:
    branches:
      - openwrt-23.05  # 监听 openwrt-23.05 分支上的推送事件
  pull_request:
    branches:
      - openwrt-23.05  # 监听 openwrt-23.05 分支上的 PR 事件

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
      - name: Checkout source
        uses: actions/checkout@v4  # 更新到 v4

      - name: Cache OpenWrt build
        id: cache-openwrt
        uses: actions/cache@v3
        with:
          path: |
            bin
            build_dir
            staging_dir
            tmp
          key: ${{ runner.os }}-openwrt-${{ hashFiles('**/*') }}
          restore-keys: |
            ${{ runner.os }}-openwrt-
      - name: Set up OpenWrt build environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
            git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
            libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
            mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils \
            rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Apply custom configuration
        run: |
          # 修改时区
          sed -i "s/timezone='UTC'/timezone='CST-8'/" package/base-files/files/bin/config_generate
          sed -i "/timezone='CST-8'/a\        set system.@system[-1].zonename='Asia/Shanghai'" package/base-files/files/bin/config_generate
          # 修改默认IP
          sed -i 's/192.168.1.1/192.168.2.1/g' package/base-files/files/bin/config_generate
      - name: Add additional packages
        run: |
          rm -rf feeds/packages/net/v2ray-geodata
          git clone --depth=1 https://github.com/sbwml/luci-app-mosdns -b v5 package/mosdns
          git clone --depth=1 https://github.com/sbwml/v2ray-geodata package/v2ray-geodata
          git clone --depth=1 https://github.com/sirpdboy/luci-app-ddns-go.git package/ddns-go
          git clone --depth=1 https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon
          git clone --depth=1 https://github.com/vernesong/OpenClash.git package/luci-app-openclash
      - name: Configure build options
        run: |
          # 使用预先配置好的 .config 文件
          # 你可以将预先配置好的 .config 文件上传到仓库中，然后在这里复制到 openwrt 目录
          cat << EOF > .config
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_DEVICE_generic=y
          # CONFIG_GRUB_IMAGES is not set
          CONFIG_GRUB_TIMEOUT="1"
          CONFIG_LIBCURL_COOKIES=y
          CONFIG_LIBCURL_FILE=y
          CONFIG_LIBCURL_FTP=y
          CONFIG_LIBCURL_HTTP=y
          CONFIG_LIBCURL_MBEDTLS=y
          CONFIG_LIBCURL_NGHTTP2=y
          CONFIG_LIBCURL_NO_SMB="!"
          CONFIG_LIBCURL_PROXY=y
          CONFIG_LIBCURL_UNIX_SOCKETS=y
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_OPENSSL_ENGINE=y
          CONFIG_OPENSSL_OPTIMIZE_SPEED=y
          CONFIG_OPENSSL_WITH_ASM=y
          CONFIG_OPENSSL_WITH_CHACHA_POLY1305=y
          CONFIG_OPENSSL_WITH_CMS=y
          CONFIG_OPENSSL_WITH_DEPRECATED=y
          CONFIG_OPENSSL_WITH_ERROR_MESSAGES=y
          CONFIG_OPENSSL_WITH_IDEA=y
          CONFIG_OPENSSL_WITH_MDC2=y
          CONFIG_OPENSSL_WITH_PSK=y
          CONFIG_OPENSSL_WITH_SEED=y
          CONFIG_OPENSSL_WITH_SRP=y
          CONFIG_OPENSSL_WITH_TLS13=y
          CONFIG_OPENSSL_WITH_WHIRLPOOL=y
          CONFIG_PACKAGE_bash=y
          CONFIG_PACKAGE_ca-certificates=y
          CONFIG_PACKAGE_cgi-io=y
          CONFIG_PACKAGE_coreutils=y
          CONFIG_PACKAGE_coreutils-nohup=y
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_ddns-go=y
          CONFIG_PACKAGE_ddns-scripts=y
          CONFIG_PACKAGE_ddns-scripts-services=y
          # CONFIG_PACKAGE_dnsmasq is not set
          CONFIG_PACKAGE_dnsmasq-full=y
          CONFIG_PACKAGE_dnsmasq_full_auth=y
          CONFIG_PACKAGE_dnsmasq_full_conntrack=y
          CONFIG_PACKAGE_dnsmasq_full_dhcp=y
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_dnsmasq_full_dnssec=y
          CONFIG_PACKAGE_dnsmasq_full_nftset=y
          CONFIG_PACKAGE_dnsmasq_full_noid=y
          CONFIG_PACKAGE_dnsmasq_full_tftp=y
          CONFIG_PACKAGE_ip-full=y
          CONFIG_PACKAGE_ipset=y
          CONFIG_PACKAGE_kmod-crypto-kpp=y
          CONFIG_PACKAGE_kmod-crypto-lib-chacha20=y
          CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=y
          CONFIG_PACKAGE_kmod-crypto-lib-curve25519=y
          CONFIG_PACKAGE_kmod-crypto-lib-poly1305=y
          CONFIG_PACKAGE_kmod-inet-diag=y
          CONFIG_PACKAGE_kmod-ipt-core=y
          CONFIG_PACKAGE_kmod-ipt-ipset=y
          CONFIG_PACKAGE_kmod-nf-conntrack-netlink=y
          CONFIG_PACKAGE_kmod-nf-ipt=y
          CONFIG_PACKAGE_kmod-tun=y
          CONFIG_PACKAGE_kmod-udptunnel4=y
          CONFIG_PACKAGE_kmod-udptunnel6=y
          CONFIG_PACKAGE_kmod-wireguard=y
          CONFIG_PACKAGE_libbpf=y
          CONFIG_PACKAGE_libcap=y
          CONFIG_PACKAGE_libcap-bin=y
          CONFIG_PACKAGE_libcap-bin-capsh-shell="/bin/sh"
          CONFIG_PACKAGE_libcurl=y
          CONFIG_PACKAGE_libelf=y
          CONFIG_PACKAGE_libgmp=y
          CONFIG_PACKAGE_libipset=y
          CONFIG_PACKAGE_libiwinfo=y
          CONFIG_PACKAGE_libiwinfo-data=y
          CONFIG_PACKAGE_liblua=y
          CONFIG_PACKAGE_liblucihttp=y
          CONFIG_PACKAGE_liblucihttp-lua=y
          CONFIG_PACKAGE_liblucihttp-ucode=y
          CONFIG_PACKAGE_libncurses=y
          CONFIG_PACKAGE_libnetfilter-conntrack=y
          CONFIG_PACKAGE_libnettle=y
          CONFIG_PACKAGE_libnfnetlink=y
          CONFIG_PACKAGE_libnghttp2=y
          CONFIG_PACKAGE_libopenssl=y
          CONFIG_PACKAGE_libopenssl-conf=y
          CONFIG_PACKAGE_libreadline=y
          CONFIG_PACKAGE_libruby=y
          CONFIG_PACKAGE_libubus-lua=y
          CONFIG_PACKAGE_libyaml=y
          CONFIG_PACKAGE_lua=y
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-app-ddns-go=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-app-mosdns=y
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_PACKAGE_luci-base=y
          CONFIG_PACKAGE_luci-compat=y
          CONFIG_PACKAGE_luci-i18n-base-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-ddns-go-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-mosdns-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-opkg-zh-cn=y
          CONFIG_PACKAGE_luci-lib-base=y
          CONFIG_PACKAGE_luci-lib-ip=y
          CONFIG_PACKAGE_luci-lib-jsonc=y
          CONFIG_PACKAGE_luci-lib-nixio=y
          CONFIG_PACKAGE_luci-light=y
          CONFIG_PACKAGE_luci-lua-runtime=y
          CONFIG_PACKAGE_luci-mod-admin-full=y
          CONFIG_PACKAGE_luci-mod-network=y
          CONFIG_PACKAGE_luci-mod-status=y
          CONFIG_PACKAGE_luci-mod-system=y
          CONFIG_PACKAGE_luci-proto-ipv6=y
          CONFIG_PACKAGE_luci-proto-ppp=y
          CONFIG_PACKAGE_luci-proto-wireguard=y
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_mosdns=y
          CONFIG_PACKAGE_openssl-util=y
          CONFIG_PACKAGE_rpcd=y
          CONFIG_PACKAGE_rpcd-mod-file=y
          CONFIG_PACKAGE_rpcd-mod-iwinfo=y
          CONFIG_PACKAGE_rpcd-mod-luci=y
          CONFIG_PACKAGE_rpcd-mod-rrdns=y
          CONFIG_PACKAGE_rpcd-mod-ucode=y
          CONFIG_PACKAGE_ruby=y
          CONFIG_PACKAGE_ruby-bigdecimal=y
          CONFIG_PACKAGE_ruby-date=y
          CONFIG_PACKAGE_ruby-digest=y
          CONFIG_PACKAGE_ruby-enc=y
          CONFIG_PACKAGE_ruby-forwardable=y
          CONFIG_PACKAGE_ruby-pstore=y
          CONFIG_PACKAGE_ruby-psych=y
          CONFIG_PACKAGE_ruby-stringio=y
          CONFIG_PACKAGE_ruby-yaml=y
          CONFIG_PACKAGE_terminfo=y
          CONFIG_PACKAGE_ucode-mod-html=y
          CONFIG_PACKAGE_ucode-mod-lua=y
          CONFIG_PACKAGE_ucode-mod-math=y
          CONFIG_PACKAGE_uhttpd=y
          CONFIG_PACKAGE_uhttpd-mod-ubus=y
          CONFIG_PACKAGE_unzip=y
          CONFIG_PACKAGE_v2dat=y
          CONFIG_PACKAGE_v2ray-geoip=y
          CONFIG_PACKAGE_v2ray-geosite=y
          CONFIG_PACKAGE_wireguard-tools=y
          CONFIG_PACKAGE_zlib=y
          # CONFIG_TARGET_ROOTFS_EXT4FS is not set
          CONFIG_TARGET_ROOTFS_PARTSIZE=256
          # CONFIG_TARGET_ROOTFS_TARGZ is not set
          EOF
      - name: Verify configuration
        run: make defconfig

      - name: Download sources
        run: make download -j8 V=s

      - name: Build OpenWrt
        run: |
          # 指定 target 和 subtarget
          make V=s -j$(nproc)
      - name: Check build output
        run: |
          if find bin/targets/ -type f -name "openwrt-x86-64-generic-squashfs-combined-efi.img.gz" -print -quit | grep -q .; then
            echo "存在以 .img.gz 结尾的文件"
          else
            ls -alhR bin/targets/**/
            exit 1
          fi
      - name: List build output files
        run: |
          ls -alh bin/targets/**/
      - name: Create unique tag
        id: create_tag
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          TAG_NAME="build-${TIMESTAMP}"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1  # 目前没有更新版本，仍然使用 v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: 'OpenWrt Build ${{ env.TAG_NAME }}'
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1  # 目前没有更新版本，仍然使用 v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img.gz
          asset_name: openwrt-${{ env.TAG_NAME }}.img.gz
          asset_content_type: application/octet-stream
